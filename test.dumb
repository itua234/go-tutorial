2. When you need to send a webhook:
Insert a row into webhook_events with status pending and attempts = 0.
3. Send the webhook (in a goroutine, background worker, or scheduled job):
Try to POST the payload to the target URL.
If it succeeds, update status to success.
If it fails, increment attempts, update last_attempt_at, and set status to failed or keep as pending for retry.
4. Retry logic:
Periodically (e.g., with a cron job or background worker), query for webhooks with status pending or failed and attempts < max_attempts.
Retry sending them.
Optionally, implement exponential backoff or delay between retries.
5. Monitor and alert:
You can monitor the table for webhooks stuck in failed status and alert if needed.

In summary:

Yes, use a DB table to track webhooks.
Insert a row for each attempt.
Retry failed ones with a background worker.
Update status and attempts on each try.
This is the industry standard for reliable webhook delivery and retry!

mkdir user-service
cd user-service
go mod init user-service
go get github.com/gin-gonic/gin