package main

import (
	"fmt"
	"os"
	"time"

	"github.com/counterapi/api/pkg"

	"github.com/chenyahui/gin-cache/persist"
	"github.com/go-redis/redis/v8"
)

// RedisCache is a config struct for redis cache.
type RedisCache struct {
	Store            *persist.RedisStore
	DefaultCacheTime time.Duration
}

// SetupRedisCache sets the redis up.
func SetupRedisCache() *RedisCache {
	return &RedisCache{
		Store: persist.NewRedisStore(redis.NewClient(&redis.Options{
			Network: "tcp",
			Addr: fmt.Sprintf(
				"%s:%s",
				os.Getenv("REDIS_HOST"),
				os.Getenv("REDIS_PORT"),
			),
		})),
		DefaultCacheTime: 10 * time.Second,
	}
}
5. Letâ€™s use the config to cache the response#
Use the RedisCache struct to cache the response of /ping endpoint. This will cache the response for 10 seconds.

package main

import "github.com/gin-gonic/gin"

func main() {
	r := gin.Default()
	cacheConfig := SetupRedisCache()

	r.GET(
		"/ping",
		cache.CacheByRequestURI(cacheConfig.Store, cacheConfig.DefaultCacheTime),
		func(c *gin.Context) {
			c.JSON(200, gin.H{
				"message": "pong",
			})
		})

	r.Run() // listen and serve on 0.0.0.0:8080
}